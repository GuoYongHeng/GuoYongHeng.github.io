{"meta":{"title":"Yongheng","subtitle":"不恋过往，不畏挑战","description":"不恋过往，不畏挑战","author":"Yongheng","url":"https://guoyongheng.github.io"},"pages":[{"title":"about","date":"2018-05-12T17:04:42.000Z","updated":"2018-05-15T12:56:20.752Z","comments":false,"path":"about/index.html","permalink":"https://guoyongheng.github.io/about/index.html","excerpt":"","text":"还是要写点东西的啊 山东某弱校辣鸡acmer 拥有着一个无趣的灵魂 最近正要准备考研了 欢迎一起来交流学习啊 邮箱：1547615191@qq.com"},{"title":"categories","date":"2018-05-12T17:14:43.000Z","updated":"2018-05-14T04:14:53.592Z","comments":false,"path":"categories/index.html","permalink":"https://guoyongheng.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-05-12T17:14:15.000Z","updated":"2018-05-14T04:14:16.921Z","comments":false,"path":"tags/index.html","permalink":"https://guoyongheng.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"蔡子经数据结构4.6","slug":"蔡子经数据结构4-6","date":"2018-11-12T14:44:10.000Z","updated":"2018-11-12T14:45:50.198Z","comments":true,"path":"2018/11/12/蔡子经数据结构4-6/","link":"","permalink":"https://guoyongheng.github.io/2018/11/12/蔡子经数据结构4-6/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134#if gyh4_6#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;struct node&#123; int row,col,val; struct node *right,*down;&#125;;typedef struct node NODE;NODE *a,*b,*c;NODE* createNullMat(int m, int n)&#123; NODE *p,*h,*q; int k; h = (NODE*)malloc(sizeof(NODE)); h-&gt;row = m; h-&gt;col = n; h-&gt;val = 0; p = h-&gt;right = h-&gt;down = h; for(k = 0; k &lt; m; ++k) &#123; q = (NODE*)malloc(sizeof(NODE)); q-&gt;col = 1000; q-&gt;right = q; q-&gt;down = p-&gt;down; p-&gt;down = q; p = q; &#125; p = h; for(k = 0; i &lt; n; ++k) &#123; q = (NODE*)malloc(sizeof(NODE)); q-&gt;row = 1000; q-&gt;down = q; q-&gt;right = p-&gt;right; p-&gt;right = q; p = q; &#125; return h;&#125;NODE* searchRowLast(NODE *a, int i)&#123; NODE *p, *h; int k; p = a; for(k = 0; k &lt;= i; ++k) p = p-&gt;down; h = p; while(p-&gt;right != h) p = p-&gt;right; return p;&#125;NODE* searchColLast(NODE *a, int j)&#123; NODe *p, *h; int k; p = a; for(k = 0; k &lt;= j; ++k) p = p-&gt;right; h = p; while(p-&gt;down != h) p = p-&gt;down; return p;&#125;void insertNODE(NODE *a, int row, int col, int value)&#123; NODE *p, *q, *r; p = searchRowLast(a, row); q = searchColLast(a, col); r = (NODe*)malloc(sizeof(NODE)); r-&gt;row = row; r-&gt;col = col; r-&gt;val = value; r-&gt;right = p-&gt;right; p-&gt;right = r; r-&gt;down = p-&gt;down; p-&gt;down = r; a-&gt;val++;&#125;NODE* createMat()&#123; int m,n,t,i,j,k,v; NODE *h, *p, *q, *r; puts(\"input row and col and the number of value\"); scanf(\"%d %d %d\",&amp;m,&amp;n,&amp;t); puts(\"input three tuples\"); h = createNullMat(m,n); h-&gt;row = m; h-&gt;col = n; for(k = 1; k &lt;= t; ++k) &#123; scanf(\"%d %d %d\",&amp;i,&amp;j,&amp;v); insertNODE(i, j, v); &#125; return h;&#125;//没毛病，转置矩阵就靠这个函数了NODE* transpositionMat(NODE *a)&#123; NODE *TranMat = createNullMat(a-&gt;col, a-&gt;row); TranMat-&gt;row = a-&gt;col; TranMat-&gt;col = a-&gt;row; TranMat-&gt;val = a-&gt;val; NODE *h, *p; p = a-&gt;down; while(p != a)//一行行的往下扫描 &#123; h = p; h = h-&gt;right; while(h != p) &#123; insertNODE(TranMat, h-&gt;col, h-&gt;row, h-&gt;val); h = h-&gt;right; &#125; p = p-&gt;down; &#125; return TranMat;&#125;int main()&#123; return 0;&#125;","categories":[{"name":"蔡子经数据结构第四章","slug":"蔡子经数据结构第四章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第四章/"}],"tags":[]},{"title":"蔡子经数据结构4.5","slug":"蔡子经数据结构4-5","date":"2018-11-12T14:44:02.000Z","updated":"2018-11-12T14:45:32.642Z","comments":true,"path":"2018/11/12/蔡子经数据结构4-5/","link":"","permalink":"https://guoyongheng.github.io/2018/11/12/蔡子经数据结构4-5/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;stdio.h&gt;#define MAXN 100/*12 15 0 00 0 0 036 46 0 520 0 0 00 72 0 68*/int a[MAXN][3] =&#123; 5,4,7,//行 列 元素个数 0,0,12, 0,1,15, 2,0,36, 2,1,46, 2,3,52, 4,1,72, 4,3,68&#125;;/*12 0 15 00 0 0 036 46 0 520 0 0 00 72 0 68*/int b[MAXN][3] =&#123; 5,4,7,//行 列 元素个数 0,0,12, 0,2,15, 2,0,36, 2,1,46, 2,3,52, 4,1,72, 4,3,68&#125;;int c[MAXN][3];int matrix[MAXN][MAXN];//把矩阵恢复后存储在这里，用于输出结果，便于直观观察void matrixAdd(int a[][3], int b[][3], int c[][3])&#123; int al = a[0][2]; int bl = b[0][2]; c[0][0] = a[0][0]; c[0][1] = a[0][1]; int i = 1, j = 1; int top = 0; while(i &lt;= al &amp;&amp; j &lt;= bl) &#123; if(a[i][0] == b[j][0] &amp;&amp; a[i][1] == b[j][1]) &#123; c[++top][0] = a[i][0]; c[top][1] = a[i][1]; c[top][2] = a[i][2] + b[j][2]; ++i,++j; &#125; else if(a[i][0] &lt; b[j][0] || (a[i][0] == b[j][0] &amp;&amp; a[i][1] &lt; b[j][1])) &#123; c[++top][0] = a[i][0]; c[top][1] = a[i][1]; c[top][2] = a[i][2]; ++i; &#125; else &#123; c[++top][0] = b[j][0]; c[top][1] = b[j][1]; c[top][2] = b[j][2]; ++j; &#125; &#125; while(i &lt;= al) &#123; c[++top][0] = a[i][0]; c[top][1] = a[i][1]; c[top][2] = a[i][2]; &#125; while(j &lt;= bl) &#123; c[++top][0] = b[j][0]; c[top][1] = b[j][1]; c[top][2] = b[j][2]; &#125; c[0][2] = top;&#125;int main()&#123; matrixAdd(a,b,c); for(int i = 1; i &lt;= c[0][2]; ++i) matrix[c[i][0]][c[i][1]] = c[i][2]; for(int i = 0; i &lt; c[0][0]; ++i) &#123; for(int j = 0; j &lt; c[0][1]; ++j) &#123; printf(\"%d \",matrix[i][j]); &#125; puts(\"\"); &#125; return 0;&#125;","categories":[{"name":"蔡子经数据结构第四章","slug":"蔡子经数据结构第四章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第四章/"}],"tags":[]},{"title":"蔡子经数据结构3.7","slug":"蔡子经数据结构3-7","date":"2018-11-12T14:27:06.000Z","updated":"2018-11-12T14:39:13.916Z","comments":true,"path":"2018/11/12/蔡子经数据结构3-7/","link":"","permalink":"https://guoyongheng.github.io/2018/11/12/蔡子经数据结构3-7/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;stdio.h&gt;#define MAXN 100int a[MAXN] = &#123;5,5,6,9,5,2,3,6,5,4&#125;;int stk[MAXN];int top = 0;void InitStack()&#123; top = 0;&#125;void Push(int x)&#123; stk[top++] = x;&#125;int Top()&#123; return stk[top-1];&#125;void Pop()&#123; --top;&#125;int IsEmpty()&#123; return top==0;&#125;int pritation(int *a, int l, int r)&#123; if(a == NULL || l &lt; 0 || r &lt;= 0 &amp;&amp; l &gt; r) return -1; int i = l, j = r; int axi = a[i]; while(i != j) &#123; if(i &lt; j &amp;&amp; a[j] &gt;= axi) --j; a[i] = a[j]; if(i &lt; j &amp;&amp; a[i] &lt;= axi) ++i; a[j] = a[i]; &#125; a[i] = axi; return i;&#125;void quickSort(int *a, int l, int r)&#123; if(a == NULL || l &lt; 0 || r &lt;= 0 || l &gt; r) return ; InitStack(); int i = l, j = r,k; Push(j); Push(i); while(!IsEmpty()) &#123; i = Top(); Pop(); j = Top(); Pop(); if(i &lt; j) &#123; k = pritation(a, i, j); if(k &gt; i) &#123; Push(k-1); Push(i); &#125; if(k &lt; j) &#123; Push(j); Push(k+1); &#125; &#125; &#125;&#125;int main()&#123; int n = 10; quickSort(a, 0, n-1); for(int i = 0; i &lt; n; ++i) printf(\"%d\\n\",a[i]); return 0;&#125;","categories":[{"name":"蔡子经数据结构第三章","slug":"蔡子经数据结构第三章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第三章/"}],"tags":[]},{"title":"蔡子经数据结构3.5","slug":"蔡子经数据结构3-5","date":"2018-11-12T14:26:52.000Z","updated":"2018-11-12T14:38:30.312Z","comments":true,"path":"2018/11/12/蔡子经数据结构3-5/","link":"","permalink":"https://guoyongheng.github.io/2018/11/12/蔡子经数据结构3-5/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;time.h&gt;#define MAXN 100typedef struct node&#123; int val; struct node* next;&#125; node;node *createNode()&#123; node *ret = (node*)malloc(sizeof(node)); ret-&gt;val = 0; ret-&gt;next = NULL; return ret;&#125;node *createList(int n)&#123; srand(time(0)); node *head = createNode(); for(int i = 0; i &lt; n; ++i) &#123; node *p = createNode(); p-&gt;val = rand()%100; p-&gt;next = head-&gt;next; head-&gt;next = p; &#125; return head;&#125;node* mergeSort(node *p)&#123; if(p == NULL) return p;//如果是个空指针，直接返回 if(p-&gt;next == NULL) return p;//如果只有一个节点，直接返回 node *fst = p; node *sed = p-&gt;next; while(sed-&gt;next)//快慢指针来寻找链表的中间位置 &#123; fst = fst-&gt;next; sed = sed-&gt;next; if(sed-&gt;next == NULL) break; sed = sed-&gt;next;// if(sed-&gt;next == NULL) break; &#125; sed = fst-&gt;next; fst-&gt;next = NULL; fst = p; fst = mergeSort(fst); sed = mergeSort(sed); p = NULL; node *ret = NULL; while(fst &amp;&amp; sed) &#123; if(fst-&gt;val &lt; sed-&gt;val) &#123; if(p == NULL) ret = p = fst; else &#123; p-&gt;next = fst; p = p-&gt;next; &#125; fst = fst-&gt;next; &#125; else &#123; if(p == NULL) ret = p = sed; else &#123; p-&gt;next = sed; p = p-&gt;next; &#125; sed = sed-&gt;next; &#125; &#125; while(fst) &#123; p-&gt;next = fst; fst = fst-&gt;next; &#125; while(sed) &#123; p-&gt;next = sed; sed = sed-&gt;next; &#125; return ret;&#125;int main()&#123; int n = 10; node *head = createList(n); node *p = head-&gt;next; while(p) &#123; printf(\"%d\\n\",p-&gt;val); p = p-&gt;next; &#125; p = head-&gt;next; free(head); head = mergeSort(p);//返回一个没有头结点的指针 puts(\"----------------------------\"); while(head) &#123; printf(\"%d\\n\",head-&gt;val); head = head-&gt;next; &#125; return 0;&#125;","categories":[{"name":"蔡子经数据结构第三章","slug":"蔡子经数据结构第三章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第三章/"}],"tags":[]},{"title":"蔡子经数据结构3.4","slug":"蔡子经数据结构3-4","date":"2018-11-12T14:26:38.000Z","updated":"2018-11-12T14:37:56.025Z","comments":true,"path":"2018/11/12/蔡子经数据结构3-4/","link":"","permalink":"https://guoyongheng.github.io/2018/11/12/蔡子经数据结构3-4/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334#include &lt;stdio.h&gt;#define MAXN 100int a[MAXN] = &#123;1,4,7,8,5,2,3,6,9,0&#125;;int n;void swap(int *x, int *y)&#123; int t = *x; *x = *y; *y = t;&#125;int main()&#123; n = 10; int num = n; while(num &gt; 0) &#123; for(int i = 0; i &lt; num-1; ++i) if(a[i] &gt; a[i+1]) swap(&amp;a[i], &amp;a[i+1]); for(int i = num-1; i &gt; 0; --i) if(a[i] &lt; a[i-1]) swap(&amp;a[i], &amp;a[i-1]); --num; &#125; for(int i = 0; i &lt; n; ++i) printf(\"%d\\n\",a[i]); return 0;&#125;","categories":[{"name":"蔡子经数据结构第三章","slug":"蔡子经数据结构第三章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第三章/"}],"tags":[]},{"title":"蔡子经数据结构3.3","slug":"蔡子经数据结构3-3","date":"2018-11-12T14:26:32.000Z","updated":"2018-11-12T14:37:30.450Z","comments":true,"path":"2018/11/12/蔡子经数据结构3-3/","link":"","permalink":"https://guoyongheng.github.io/2018/11/12/蔡子经数据结构3-3/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;time.h&gt;typedef struct node&#123; int val; struct node* next;&#125; node;node* createNode()&#123; node *ret = (node*)malloc(sizeof(node)); ret-&gt;val = 0; ret-&gt;next = NULL; return ret;&#125;int main()&#123; srand(time(0)); node *head = createNode(); for(int i = 0; i &lt; 5; ++i) &#123; node *p = createNode(); p-&gt;val = rand()%100; p-&gt;next = head-&gt;next; head-&gt;next = p; &#125; node *p = head-&gt;next; while(p) &#123; printf(\"%d,\",p-&gt;val); p = p-&gt;next; &#125; puts(\"\"); p = head; node *pre = head; for(; pre-&gt;next;) &#123; node *first = pre-&gt;next; node *mark = first; while(first) &#123; if(first-&gt;val &lt; mark-&gt;val) mark = first; first = first-&gt;next; &#125; pre = pre-&gt;next; int temp = mark-&gt;val; mark-&gt;val = pre-&gt;val; pre-&gt;val = temp; &#125; p = head-&gt;next; while(p) &#123; printf(\"%d,\",p-&gt;val); p = p-&gt;next; &#125; return 0;&#125;","categories":[{"name":"蔡子经数据结构第三章","slug":"蔡子经数据结构第三章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第三章/"}],"tags":[]},{"title":"蔡子经数据结构3.2","slug":"蔡子经数据结构3-2","date":"2018-11-12T14:26:26.000Z","updated":"2018-11-12T14:37:07.921Z","comments":true,"path":"2018/11/12/蔡子经数据结构3-2/","link":"","permalink":"https://guoyongheng.github.io/2018/11/12/蔡子经数据结构3-2/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;stdio.h&gt;#include &lt;time.h&gt;#include &lt;stdlib.h&gt;#define MAXN 100int a[MAXN];int top = 0;typedef struct node&#123; int val; struct node* next;&#125; node;node* createNode()&#123; node* ret = (node*)malloc(sizeof(node)); ret-&gt;next = NULL; ret-&gt;val = -1; return ret;&#125;void Insert(node* pre, node* p, int x)&#123; while(p) &#123; if(x &lt; p-&gt;val) break; pre = pre-&gt;next; p = p-&gt;next; &#125; node *in = createNode(); in-&gt;val = x; in-&gt;next = p; pre-&gt;next = in;&#125;int cmp(const void* a, const void* b)&#123; return *(int*)a - *(int*)b;&#125;int main()&#123; srand(time(NULL)); node* head = createNode(); for(int i = 0; i &lt; 10; ++i) &#123; a[top++] = rand()%100; printf(\"%d \",a[top-1]); &#125; puts(\"\"); for(int i = 0; i &lt; top; ++i) Insert(head, head-&gt;next, a[i]); node *p = head-&gt;next; while(p) &#123; printf(\"%d \",p-&gt;val); p = p-&gt;next; &#125; puts(\"\"); qsort(a,top,sizeof(int),cmp); for(int i = 0; i &lt; top; ++i) printf(\"%d \",a[i]); return 0;&#125;","categories":[{"name":"蔡子经数据结构第三章","slug":"蔡子经数据结构第三章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第三章/"}],"tags":[]},{"title":"蔡子经数据结构3.1","slug":"蔡子经数据结构3-1","date":"2018-11-12T14:25:03.000Z","updated":"2018-11-12T14:36:43.241Z","comments":true,"path":"2018/11/12/蔡子经数据结构3-1/","link":"","permalink":"https://guoyongheng.github.io/2018/11/12/蔡子经数据结构3-1/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738#include &lt;stdio.h&gt;#define MAXN 100int num[MAXN];int n;//a是数组名 n是数组长度 x是要查找的值int binarySearch(int *a, int n, int x)&#123; int l = 0; int r = n-1; if(l &gt; r) return 0; while(l &lt;= r) &#123; int mid = (l+r)&gt;&gt;1; if(x &lt;= a[mid]) r = mid-1; else l = mid+1; &#125; return l;&#125;int main()&#123; int ins; scanf(\"%d\",&amp;n); for(int i = 0; i &lt; n; ++i) &#123; scanf(\"%d\",&amp;ins); int x = binarySearch(num, i, ins); for(int j = i+1; j &gt; x; --j) num[j] = num[j-1]; num[x] = ins; for(int j = 0; j &lt;= i; ++j) printf(\"%d \",num[j]); puts(\"\"); &#125; return 0;&#125;","categories":[{"name":"蔡子经数据结构第三章","slug":"蔡子经数据结构第三章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第三章/"}],"tags":[]},{"title":"蔡子经数据结构2.4","slug":"蔡子经数据结构2-4","date":"2018-11-11T15:24:20.000Z","updated":"2018-11-11T15:26:15.101Z","comments":true,"path":"2018/11/11/蔡子经数据结构2-4/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构2-4/","excerpt":"","text":"123456789101112131415161718192021222324252627282930#include &lt;stdio.h&gt;#include &lt;string.h&gt;#define MAXN 100char str[MAXN];int flink[MAXN];void faillink(char *p, int *flink, int m)&#123; flink[0] = -1; int j = 1, k; while(j &lt; m) &#123; k = flink[j-1]; while(k != -1 &amp;&amp; p[k] != p[j-1]) k = flink[k]; flink[j] = k+1; j++; &#125;&#125;int main()&#123; scanf(\"%s\",str); int len = strlen(str); faillink(str, flink, len); for(int i = 0; i &lt; len; ++i) printf(\"%d \",flink[i]); return 0;&#125;","categories":[{"name":"蔡子经数据结构第二章","slug":"蔡子经数据结构第二章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第二章/"}],"tags":[]},{"title":"蔡子经数据结构2.1","slug":"蔡子经数据结构2-1","date":"2018-11-11T15:23:44.000Z","updated":"2018-11-11T15:25:36.266Z","comments":true,"path":"2018/11/11/蔡子经数据结构2-1/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构2-1/","excerpt":"","text":"1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;#include &lt;string.h&gt;#define max(a,b) (a&gt;b?a:b)#define MAXN 100char str1[MAXN];char str2[MAXN];int dp[MAXN][MAXN];int main()&#123; memset(dp, 0, sizeof(dp));//其实全局变量默认初始化为0 scanf(\"%s %s\",str1, str2); int len1 = strlen(str1); int len2 = strlen(str2); int res = 0; for(int i = 0; i &lt; len1; ++i) &#123; for(int j = 0; j &lt; len2; ++j) &#123; if(str1[i] == str2[j]) dp[i+1][j+1] = dp[i][j] + 1; res = max(res, dp[i+1][j+1]); &#125; &#125; printf(\"%d\\n\", res); return 0;&#125;","categories":[{"name":"蔡子经数据结构第二章","slug":"蔡子经数据结构第二章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第二章/"}],"tags":[]},{"title":"蔡子经数据结构1.19","slug":"蔡子经数据结构1-19","date":"2018-11-11T14:58:40.000Z","updated":"2018-11-11T15:02:20.749Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-19/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-19/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct node&#123; int val; struct node* next;&#125; node;node* createNode()&#123; node *ret = (node*)malloc(sizeof(node)); ret-&gt;val = 0; ret-&gt;next = NULL; return ret;&#125;//void print(node *head)&#123; node *p = head-&gt;next; while(p != head) &#123; printf(\"%d \",p-&gt;val); p = p-&gt;next; &#125; puts(\"\"); return ;&#125;node *modify(node *p)&#123; node *head = createNode(); head-&gt;next = p; node *temp = head; int cnt = 0; while(temp-&gt;next) &#123; ++cnt; temp = temp-&gt;next; &#125; temp-&gt;next = head; head-&gt;val = cnt; return head;&#125;int main()&#123; node *p = NULL, *rec = NULL; for(int i = 0; i &lt; 10; ++i) &#123; if(p == NULL) &#123; p = createNode(); p-&gt;val = i+1; rec = p; &#125; else &#123; p-&gt;next = createNode(); p = p-&gt;next; p-&gt;val = i+1; &#125; &#125; p = rec; node *head = modify(p); print(head); return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.17","slug":"蔡子经数据结构1-17","date":"2018-11-11T14:58:25.000Z","updated":"2018-11-11T15:05:39.001Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-17/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-17/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct node&#123; int val; struct node* next;&#125; node;node* createNode()&#123; node *ret = (node*)malloc(sizeof(node)); ret-&gt;val = 0; ret-&gt;next = NULL; return ret;&#125;void print(node *head)&#123; node *p = head-&gt;next; while(p != head) &#123; printf(\"%d \",p-&gt;val); p = p-&gt;next; &#125; puts(\"\"); return ;&#125;int main()&#123; int n,i,k; scanf(\"%d %d %d\",&amp;n,&amp;i,&amp;k); node *head = createNode(); head-&gt;next = head; for(int i = n; i &gt;= 1; --i) &#123; node *p = createNode(); p-&gt;val = i; p-&gt;next = head-&gt;next; head-&gt;next = p; &#125; print(head); int cnt = 1; node *pre = head; while(cnt != i) &#123; ++cnt; pre = pre-&gt;next; &#125; node *p = pre-&gt;next; cnt = 0; while(pre != p) &#123; while(pre != p) &#123; if(p-&gt;val != 0) ++cnt; if(cnt == k) break; pre = pre-&gt;next; p = p-&gt;next; &#125; pre-&gt;next = p-&gt;next; printf(\"%d \",p-&gt;val); cnt = 0; free(p); p = pre-&gt;next; &#125; return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.16","slug":"蔡子经数据结构1-16","date":"2018-11-11T14:58:05.000Z","updated":"2018-11-11T15:04:55.326Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-16/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-16/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct node&#123; int val; struct node* next;&#125; node;//创建节点node* createNode()&#123; node *ret = (node*)malloc(sizeof(node)); ret-&gt;val = 0; ret-&gt;next = NULL; return ret;&#125;//创建s+1到n的循环链表node* createLink(int s, int n)&#123; node *head = createNode(); head-&gt;next = head; for(int i = s; i &lt; n; ++i) &#123; node *p = createNode(); p-&gt;val = n - (i-s); p-&gt;next = head-&gt;next; head-&gt;next = p; &#125; return head;&#125;//打印循环链表void print(node *head)&#123; node *p = head-&gt;next; while(p != head) &#123; printf(\"%d \",p-&gt;val); p = p-&gt;next; &#125; puts(\"\"); return ;&#125;node *merge(node *x, node *y)&#123; node *ex = x; x = x-&gt;next; node *ey = y; y = y-&gt;next; node *head = createNode(); node *ph = head; while(x != ex &amp;&amp; y != ey) &#123; if(x-&gt;val &lt; y-&gt;val) &#123; ph-&gt;next = x; x = x-&gt;next; &#125; else &#123; ph-&gt;next = y; y = y-&gt;next; &#125; ph = ph-&gt;next; &#125; while(x != ex) &#123; ph-&gt;next = x; x = x-&gt;next; ph = ph-&gt;next; &#125; while(y != ey) &#123; ph-&gt;next = y; y = y-&gt;next; ph = ph-&gt;next; &#125; free(ex); free(ey); ph-&gt;next = head; return head;&#125;int main()&#123; node *x = createLink(2,13); node *y = createLink(7,9); print(x); print(y); node *head = merge(x, y); print(head);&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.15","slug":"蔡子经数据结构1-15","date":"2018-11-11T14:57:49.000Z","updated":"2018-11-11T15:12:34.805Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-15/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-15/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct node&#123; int val; struct node* next;&#125; node;node* createNode()&#123; node *ret = (node*)malloc(sizeof(node)); ret-&gt;val = 0; ret-&gt;next = NULL; return ret;&#125;node* createLink(int n)&#123; node *head = createNode(); for(int i = 0; i &lt; n; ++i) &#123; node *p = createNode(); p-&gt;val = rand()%100; p-&gt;next = head-&gt;next; head-&gt;next = p; &#125; return head;&#125;node* merge(node *x, node *y)&#123; node *head = createNode(); node *px = x-&gt;next; free(x); node *py = y-&gt;next; free(y); node *ph = head; while(px &amp;&amp; py) &#123; node *tx = px; px = px-&gt;next; node *ty = py; py = py-&gt;next; tx-&gt;next = ty; ty-&gt;next = NULL; ph-&gt;next = tx; ph = ty; &#125; if(px) ph-&gt;next = px; if(py) ph-&gt;next = py; return head;&#125;void print(node *p)&#123; p = p-&gt;next; while(p) &#123; printf(\"%d \",p-&gt;val); p = p-&gt;next; &#125; puts(\"\"); return ;&#125;int main()&#123; srand(time(NULL)); node *x = createLink(5); print(x); node *y = createLink(6); print(y); node *head = merge(x, y); print(head); return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.14","slug":"蔡子经数据结构1-14","date":"2018-11-11T14:57:34.000Z","updated":"2018-11-11T15:03:24.708Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-14/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-14/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct node&#123; int val; struct node* next;&#125; node;node* createNode()&#123; node *ret = (node*)malloc(sizeof(node)); ret-&gt;val = 0; ret-&gt;next = NULL; return ret;&#125;void del(node *head, int a)//删除a的前驱节点，如果a是第一个节点，则啥都不干&#123; if(head-&gt;next-&gt;val == a) return; node *pre = head; node *p = head-&gt;next; while(p-&gt;next) &#123; if(p-&gt;next-&gt;val == a) &#123; pre-&gt;next = p-&gt;next; free(p); return ; &#125; p = p-&gt;next; pre = pre-&gt;next; &#125; return ;&#125;int main()&#123; node *head = createNode(); node *tail = head; for(int i = 0; i &lt; 10; ++i) &#123; node *p = createNode(); p-&gt;val = i+1; tail-&gt;next = p; tail = tail-&gt;next; &#125; del(head, 2); node *p = head-&gt;next; while(p) &#123; printf(\"%d \",p-&gt;val); p = p-&gt;next; &#125; return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.13","slug":"蔡子经数据结构1-13","date":"2018-11-11T14:57:20.000Z","updated":"2018-11-11T15:00:56.359Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-13/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-13/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct node&#123; int val; struct node* next;&#125; node;node* createNode()&#123; node *ret = (node*)malloc(sizeof(node)); ret-&gt;val = 0; ret-&gt;next = NULL; return ret;&#125;void insert(node *head, int a, int b)//把a插入在b的前面，如果b不存在，就插在最后&#123; node *pre = head; node *p = head-&gt;next; while(p) &#123; if(p-&gt;val == b) &#123; node *q = createNode(); q-&gt;val = a; q-&gt;next = p; pre-&gt;next = q; return; &#125; pre = pre-&gt;next; p = p-&gt;next; &#125; node *q = createNode(); q-&gt;val = a; pre-&gt;next = q; return;&#125;int main()&#123; node *head = createNode(); node *tail = head; for(int i = 0; i &lt; 10; ++i) &#123; node *p = createNode(); p-&gt;val = i+1; tail-&gt;next = p; tail = tail-&gt;next; &#125; insert(head, 11, 5);//5前边插入11 insert(head, 20,33);//33前边插入20 node *p = head-&gt;next; while(p) &#123; printf(\"%d \",p-&gt;val); p = p-&gt;next; &#125; return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.12","slug":"蔡子经数据结构1-12","date":"2018-11-11T14:57:02.000Z","updated":"2018-11-11T15:11:42.151Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-12/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-12/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct node&#123; int val; struct node* next;&#125; node;node* createNode()&#123; node *ret = (node*)malloc(sizeof(node)); ret-&gt;val = 0; ret-&gt;next = NULL; return ret;&#125;void reverse(node *head)&#123; node *p = head-&gt;next; head-&gt;next = NULL; while(p) &#123; node *q = p; p = p-&gt;next; q-&gt;next = head-&gt;next; head-&gt;next = q; &#125;&#125;int main()&#123; node *head = createNode(); node *tail = head; for(int i = 0; i &lt; 10; ++i) &#123; node *p = createNode(); p-&gt;val = i+1; tail-&gt;next = p; tail = tail-&gt;next; &#125; reverse(head); node *p = head-&gt;next; while(p) &#123; printf(\"%d \",p-&gt;val); p = p-&gt;next; &#125; puts(\"\"); return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.11","slug":"蔡子经数据结构1-11","date":"2018-11-11T14:56:41.000Z","updated":"2018-11-11T15:13:25.316Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-11/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-11/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct node&#123; int val; struct node* next;&#125; node;node* createNode()&#123; node *ret = (node*)malloc(sizeof(node)); ret-&gt;val = 0; ret-&gt;next = NULL; return ret;&#125;int main()&#123; node *head = createNode(); node *tail = head; for(int i = 0; i &lt; 10; ++i) &#123; node *p = createNode(); p-&gt;val = i+1; tail-&gt;next = p; tail = tail-&gt;next; &#125; node *p = head-&gt;next; int cnt = 0; while(p) p = p-&gt;next, ++cnt; printf(\"%d\\n\",cnt); return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.8","slug":"蔡子经数据结构1-8","date":"2018-11-11T14:56:12.000Z","updated":"2018-11-11T15:09:42.489Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-8/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-8/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;stdio.h&gt;#define MAXN 100int stack[MAXN];int topl = 0;int topr = MAXN-1;void push(int n, int x)&#123; if(topr &lt; topl) &#123; puts(\"overflowed\"); return ; &#125; if(n == 1)//左边入栈 &#123; stack[topl++] = x; &#125; else//右边入栈 &#123; stack[topr--] = x; &#125;&#125;int pop(int n)&#123; if(n == 1)//左边出栈 &#123; if(topl == 0) &#123; puts(\"empty\"); return -1; &#125; return stack[--topl]; &#125; else//右边 &#123; if(topr == MAXN-1) &#123; puts(\"empty\"); return -1; &#125; return stack[++topr]; &#125;&#125;int main()&#123; int n,x; while(scanf(\"%d\",&amp;n) != EOF) &#123; if(n == 1)//表示入栈 &#123; scanf(\"%d %d\",&amp;n,&amp;x); push(n, x); &#125; else//否则就是出栈 &#123; scanf(\"%d\",&amp;n); printf(\"%d\\n\",pop(n)); &#125; &#125; return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.7","slug":"蔡子经数据结构1-7","date":"2018-11-11T14:55:49.000Z","updated":"2018-11-11T15:08:58.897Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-7/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-7/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;stdio.h&gt;#define MAXN 100int Stack[MAXN];int top;int n;//车厢个数int que[MAXN];//存储车厢int res[MAXN];//我入栈的时候没有检测栈是否满了//出栈的时候也没有检测栈是否为空void initStack()&#123; top = 0;&#125;void Push(int x)&#123; Stack[top++] = x;&#125;int Pop()&#123; return Stack[--top];&#125;int IsEmpty()&#123; return top == 0;&#125;//1表示入栈，0表示出栈void dfs(int ptr, int lim)&#123; if(ptr == n &amp;&amp; IsEmpty()) &#123; for(int i = 0; i &lt; lim; ++i) printf(\"%d \",res[i]); puts(\"\"); return ; &#125; if(ptr &lt; n)//如果车队还有车，就入栈 &#123; Push(que[ptr]); dfs(ptr+1, lim); Pop(); &#125; if(!IsEmpty())//如果栈不空，就出栈 &#123; res[lim] = Pop(); dfs(ptr, lim+1); Push(res[lim]); &#125;&#125;int main()&#123; initStack(); scanf(\"%d\",&amp;n); for(int i = 0; i &lt; n; ++i) scanf(\"%d\",&amp;que[i]); dfs(0, 0);//1表示入栈操作 return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.6","slug":"蔡子经数据结构1-6","date":"2018-11-11T14:55:25.000Z","updated":"2018-11-11T15:08:23.648Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-6/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-6/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233#include &lt;stdio.h&gt;#define MAXN 100int flag[MAXN];int res[MAXN];int top = 0;int main()&#123; int n,i,k; scanf(\"%d %d %d\",&amp;n,&amp;i,&amp;k); for(int i = 1; i &lt;= n; ++i) flag[i] = 1; int all = n; int cnt = 0; while(all) &#123; while(cnt != k) &#123; if(flag[i]) ++cnt; ++i; if(i == n+1) i = 1; &#125; cnt = 0; --all; if(i == 1) flag[n] = 0, res[top++] = n; else flag[i-1] = 0, res[top++] = i-1; &#125; for(int i = 0; i &lt; top; ++i) printf(\"%d \",res[i]); puts(\"\"); return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.4","slug":"蔡子经数据结构1-4","date":"2018-11-11T14:54:50.000Z","updated":"2018-11-11T15:06:57.909Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-4/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-4/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546//这个程序假设x会输入成1x^1 这样可以简化处理，不然处理起来就麻烦了，宿舍太乱，不想写麻烦#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;ctype.h&gt;#define MAXN 100int exp[MAXN];int num[MAXN];int top = 0;char str[MAXN];//假设所有输入合法int pow(int a, int b)&#123; int ret = 1; while(b) &#123; if(b&amp;1) ret = ret*a; a = a*a; b &gt;&gt;= 1; &#125; return ret;&#125;int main()&#123; scanf(\"%s\",str); int len = strlen(str); char *p = str; while(*p) &#123; num[top] = atoi(p); while(*p++ != '^'); exp[top++] = atoi(p); while(isdigit(*p)) p++; while(!isdigit(*p) &amp;&amp; (*p) != '\\0') p++; &#125; int x0; scanf(\"%d\",&amp;x0); int sum = 0; for(int i = 0; i &lt; top; ++i) sum += num[i]*pow(x0, exp[i]); printf(\"%d\\n\",sum); return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.3","slug":"蔡子经数据结构1-3","date":"2018-11-11T14:54:27.000Z","updated":"2018-11-11T15:06:19.786Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-3/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-3/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435#include &lt;stdio.h&gt;int comp(const void *a, const void *b)&#123; return *(int*)a - *(int*)b;&#125;void print(int *a, int n)&#123; for(int i = 0; i &lt; n; ++i) printf(\"%d \",a[i]); puts(\"\");&#125;int unique(int *a, int n)&#123; int ret = 1; for(int i = 1; i &lt; n; ++i) if(a[i] != a[i-1]) a[ret++] = a[i]; return ret;&#125;int main()&#123; int a[10] = &#123;1,1,3,4,4,5,4,3,1,1&#125;; print(a, 10); qsort(a,10,sizeof(a[0]),comp); print(a, 10); int n = unique(a, 10); print(a, n); return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.2","slug":"蔡子经数据结构1-2","date":"2018-11-11T14:53:57.000Z","updated":"2018-11-11T15:00:06.572Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-2/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-2/","excerpt":"","text":"12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt;void overturn(int *a, int n)&#123; int temp; for(int i = 0; i &lt; n/2; ++i) &#123; temp = a[i]; a[i] = a[n-i-1]; a[n-i-1] = temp; &#125;&#125;void print(int *a, int n)&#123; for(int i = 0; i &lt; n; ++i) printf(\"%d \",a[i]); puts(\"\");&#125;int main()&#123; int a[10] = &#123;0,1,2,3,4,5,6,7,8,9&#125;; print(a, 10); overturn(a, 10); print(a, 10); return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蔡子经数据结构1.1","slug":"蔡子经数据结构1-1","date":"2018-11-11T14:49:27.000Z","updated":"2018-11-11T14:52:54.137Z","comments":true,"path":"2018/11/11/蔡子经数据结构1-1/","link":"","permalink":"https://guoyongheng.github.io/2018/11/11/蔡子经数据结构1-1/","excerpt":"","text":"123456789101112131415161718192021222324252627282930#include &lt;stdio.h&gt;int sgn(int x)&#123; if(x &gt; 0) return 1; if(x &lt; 0) return -1; return 0;&#125;int cmp(int *a, int *b , int n, int m)&#123; int i = 0, j = 0; while(i &lt; n &amp;&amp; j &lt; m) &#123; if(a[i] != b[j]) return sgn(a[i]-b[j]); ++i,++j; &#125; if(i == n &amp;&amp; j == m) return 0; if(i == n) return -1; return 1;&#125;int main()&#123; int a[10] = &#123;0,1,4,7,8,5,2,3,6,9&#125;; int b[5] = &#123;0,1,4,7,8&#125;; int res = cmp(a, b, 10, 5); printf(\"%d\\n\",res); return 0;&#125;","categories":[{"name":"蔡子经数据结构第一章","slug":"蔡子经数据结构第一章","permalink":"https://guoyongheng.github.io/categories/蔡子经数据结构第一章/"}],"tags":[]},{"title":"蒟蒻的acm经历","slug":"蒟蒻的acm经历","date":"2018-05-29T15:25:02.000Z","updated":"2018-05-29T17:44:09.281Z","comments":true,"path":"2018/05/29/蒟蒻的acm经历/","link":"","permalink":"https://guoyongheng.github.io/2018/05/29/蒟蒻的acm经历/","excerpt":"","text":"虽然是个弱渣，但也想写写自己的acm经历。 初次接触编程是在初二的时候，学了段时间易语言，当时非常向往成为一名黑客，便决心大学要学计算机。就这样，高考的时候志愿填了软件工程。 大一的时候，听到学长说起过学校的acm实验室，后来也在学校的oj上看到了acm实验室纳新的信息，便报名了，当时也是害怕自己进不去实验室，就会经常刷一些基础的数据结构的题目。当时比较后悔的一件事情就是拿《算法之道》这本书作为入门书，新人表示完全看不懂。幸好后来发现了《啊哈算法》，就跟着这本书学习了基础的数据结构。在大一的时候，实验室有一个选拔，我因为一些个人的事情，没去。所以一直到大二，我才算正式进入学校的acm实验室。 参加第一个比赛是在大二，比赛是浙大陈越姥发起的那个天梯赛，比较水，学校就派了两个队，我所在的队是华东赛区团队三等奖，另一个队优秀奖。。令人比较吃惊的就是这个比赛在给学校算成绩的时候竟然是算一所学校的所有队伍的总分，这个就比较扯淡了。。。两个队的跟四个队的根本没法比，虽然我们根本可能就凑不出来四个队。。。 参加的第二场比赛是蓝桥杯的省赛，拿了个省二，伤心了几天，我的俩队友也是一一个省二，一个省三。 终于到参加acm省赛了，在青岛科技大学，当时结果是铜牌线下第一名，当时真是特别受打击，线下第一，做了三道题，按照题目难度来说，出四道题是没问题的，只是有一道题，到最后也没看懂什么意思，太坑了。我总觉得如果不是青岛科技大学把题目印错了，我队伍也不会有那么多罚时，三道题也足够拿个铜了。但是有个题印错了一个数，导致我队那题错了好多遍，罚时太多，当时真是太气了，连题目都印错了。虽说后来改正了，但是你咋不早说。 第一次省赛过后，真的是打击太大了，感觉都有点抑郁了，很压抑，当然仅仅是省赛不会造成这么大影响，还有些别的无关计算机的东西。我的两个队友，z同学是当时刚入门没多久的新手，t同学是比我早半年多进入实验室的老手，我在他俩之间。老实说，t同学确实是个话痨，爱打游戏王和王者荣耀（其实后来我也迷上了王者荣耀，好在后来戒掉了），我和t同学在实验室的机位挨着，因为比赛结果影响，我当时基本就像是在监视他，只要我在电脑前，你就别想玩游戏，感觉这样有点过分了啊。后来发现这样也没啥用，他有点话痨，他和我说话我还得回他，我偶尔也会控制不住和他说话，所以后来我就搬走了，坐在了一堆学弟中间，谁也不理我，我也不理谁。 过了几个月，大三了，也到了打争夺区域赛名额的网络赛的时候了，这时候大三一共还有三个队伍。我队伍表现最好的一次是新疆的那场网络赛，但是名次还是太低。幸运的是实验室的qianqian大佬拿到一个北京和一个青岛的名额，加上老师在青岛申请的一个名额和学长在省赛中表现好而分给的一个西安的名额，共四个区域赛名额。网络赛一共有七次，对应七个赛区，我队是综合表现最差的一队，理所当然的没有资格参加区域赛。当时是另外两个队伍重组了一个队去西安，结果打铁，不是太好。然后那两个队伍各自去青岛，拿到两块铜牌，还算可以。不过那年青岛的题也是真毒，三题从金牌卡到铜牌。。当时北京的名额出来的比较晚，而且也有点出乎大家的意料，由于每个人的参赛次数有限制，所以又要重新组一个队去北京参赛，于是老师又从三个大三的队伍中各抽一个人组队去北京，我比较幸运，我队伍里是我去参赛。北京的题比青岛要好点，三题银到铜。当时我队就做了俩签到题，挂机到结束，水到个手速铜牌，名次好像是七十多名，不得不说x姐（其实他是男的）手速还是很快的。当时有有一道区间dp的题，我也做过类似的题，但是那题多了一个条件，死活没做出来，不得不说还是太菜。 拿到这个铜牌后，真的感觉就是花光了整个大学期间所有的运气才换来这一个铜牌，因为在这两年左右的时间内，我失去的那个东西，让我太痛苦了。 很快又大三下了，还有一场acm省赛，好像是五月六号比的，也可能是七号。。。这次省赛我的队伍又有变动了，因为有一个队伍的一个同学准备考研，就退出了，我队伍的z同学便去了那个队伍，主要还是他觉得在我这个队伍没啥希望，老实说我也是这样觉得。如果有机会跳出这个队伍的话，我也会选择去别的队伍。但是毕竟t同学还没拿牌，也不能就这样丢下他啊。z同学走后，来了一个刚考完研的学长和我俩组队参加了省赛。省赛拿银，很高兴学弟拿到了金牌。老实说这次省赛锅也挺多的，据说有一个题数据没传上去，提交的程序只要不输出东西就能ac，还有一个题，标程的时间复杂度是O(n)，结果数据只能卡住O(nlogn)的程序，卡不住O(n^2)的程序，我队就被卡在这里了。别的题数据也有不少锅，总之搞的很多人都不大高兴。不过我倒是无所谓，反正不管你数据水不水，高手都是卡不住的，我们这些菜鸡互嘬，也没啥意义。 省赛之前还有一个蓝桥杯的省赛，这次拿到了省一，而且还是全省第四，虽然是b组的，不过运气还算可以。不过前两天的蓝桥国赛就被人踩爆了，拿个国二，结束后才发现我的那个暴力写的好丑啊，为什么要这样写呢？？？比较出乎意料的是蓝桥竟然出了莫比乌斯反演的题目，wtf？半年多没碰数论了，不会，暴力拿点分就行了。 记得在大二训练的时候，t同学不愿学数学，我就负责了数学，开始看组合数学的时候，看的是冯速老师翻译的那本，看的模棱两可的，感觉太难，看到后边就不再看了，就又看起来初等数论，这个还好，看起来还挺好懂，但是题也太难了，而且定理太多，记不住，看到后来，也是又不看了，还有一个原因是时间不够，就想一口吃个大胖子，但是事实证明，吃不进去啊。现在想想，当时训练的也是够乱的，菜也是活该。后来发现比赛中的数论题或者组合数学题，一般就算我学了我也做不出来，所以就不做数学了，改去做别的类型的题了，大三上在hackerrank上刷了小半年的algorithm那个面板的archive，主要就是dp，思维题，模拟，图，树之类的。感觉题也做了不少，就是独立思考的太少了。 参加acm这两年过的还是很充实的，学到了很多，也失去了很多，不过我总感觉得不偿失，还是很后悔当初付出的努力不够，大二玩王者玩的有点多，训练时还偶尔走走神，浪费了太多时间，还总是在自我安慰。退役了，安心准备考研吧。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://guoyongheng.github.io/categories/杂谈/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://guoyongheng.github.io/tags/杂谈/"}]},{"title":"洛谷 P1486[NOI2004]郁闷的出纳员","slug":"洛谷 P1486[NOI2004]郁闷的出纳员","date":"2018-05-20T17:04:17.000Z","updated":"2018-05-20T17:15:48.176Z","comments":true,"path":"2018/05/21/洛谷 P1486[NOI2004]郁闷的出纳员/","link":"","permalink":"https://guoyongheng.github.io/2018/05/21/洛谷 P1486[NOI2004]郁闷的出纳员/","excerpt":"","text":"题目https://www.luogu.org/problemnew/show/P1486 题意写一个工资统计程序，实现对每个员工工资的增加和扣除，对员工的雇佣和解雇，查询工资第k多的人 题解这是第二次写这个题，第一次在这里不知道该怎么操作，想打标记也不好打，就看了题解，这次再写就会了。增加一个der变量，用来维护所有人工资的变化量，对于A操作，der+=k，对于S操作，der-=k，对于I操作，把员工工资插入splay的时候要减掉der。这样der就是所有员工工资的变化量了。然后就是普通的查询。写的时候我是把第k大的工资转换成了第k2小的工资来查询的，错了一组数据，我对比了下发现有一个查询出错了，不知道为啥，就改成了直接查询第k大的，就过了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148#include &lt;stdio.h&gt;const int MAXN = 2e5+10;const int INF = 1e9;struct node&#123; int ch[2]; int val,cnt,sz,ff;&#125;;node t[MAXN];int root,tot,sum,min,n;void pushUp(int x)&#123; t[x].sz = t[t[x].ch[0]].sz + t[t[x].ch[1]].sz + t[x].cnt;&#125;void Rotate(int x)&#123; int y = t[x].ff; int z = t[y].ff; int k = (t[y].ch[1] == x); t[z].ch[t[z].ch[1]==y] = x; t[x].ff = z; t[y].ch[k] = t[x].ch[k^1]; t[t[x].ch[k^1]].ff = y; t[x].ch[k^1] = y; t[y].ff = x; pushUp(y); pushUp(x);&#125;void Splay(int x, int goal)&#123; while(t[x].ff != goal) &#123; int y = t[x].ff; int z = t[y].ff; if(z != goal) (t[z].ch[0]==y)^(t[y].ch[0]==x)?Rotate(x):Rotate(y); Rotate(x); &#125; if(goal == 0) root = x;&#125;void Find(int x)&#123; int u = root; if(!u) return; while(t[u].ch[x &gt; t[u].val] &amp;&amp; x != t[u].val) u = t[u].ch[x &gt; t[u].val]; Splay(u, 0);&#125;void Insert(int x)&#123; int u = root, ff = 0; while(u &amp;&amp; t[u].val != x) &#123; ff = u; u = t[u].ch[x &gt; t[u].val]; &#125; if(u) t[u].cnt++; else &#123; u = ++tot; if(ff) t[ff].ch[x &gt; t[ff].val] = u; t[u].ch[0] = t[u].ch[1] = 0; t[u].ff = ff; t[u].val = x; t[u].cnt = t[u].sz = 1; &#125; Splay(u, 0);&#125;int Next(int x, int f)&#123; Find(x); int u = root; if(t[u].val&gt;x &amp;&amp; f) return u; if(t[u].val&lt;x &amp;&amp; !f) return u; u = t[u].ch[f]; while(t[u].ch[f^1]) u = t[u].ch[f^1]; return u;&#125;void Delete(int x)&#123; int next = Next(x, 1); Find(-INF); Splay(next, root); sum += t[t[next].ch[0]].sz; t[next].ch[0] = 0; pushUp(next); pushUp(root);&#125;int KTh(int k)&#123; int u = root; while(true) &#123; if(t[t[u].ch[1]].sz &gt;= k) u = t[u].ch[1]; else if(k &gt; t[t[u].ch[1]].sz+t[u].cnt) &#123; k -= (t[t[u].ch[1]].sz+t[u].cnt); u = t[u].ch[0]; &#125; else return t[u].val; &#125;&#125;int main()&#123; scanf(\"%d %d\",&amp;n,&amp;min); Insert(-INF); Insert(INF); int der = 0,k; char ch; while(n--) &#123; scanf(\" %c %d\",&amp;ch,&amp;k); if(ch == 'I') &#123; if(k &lt; min) continue; else Insert(k-der); &#125; else if(ch == 'A') &#123; der += k; &#125; else if(ch == 'S') &#123; der -= k; Delete(min-der-1); &#125; else &#123; if(k &gt; t[root].sz-2) puts(\"-1\"); else printf(\"%d\\n\",KTh(k+1)+der); &#125; &#125; printf(\"%d\\n\",sum); return 0;&#125;","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://guoyongheng.github.io/categories/数据结构/"}],"tags":[{"name":"splay","slug":"splay","permalink":"https://guoyongheng.github.io/tags/splay/"}]},{"title":"洛谷 P2286[HNOI2004]宠物收养场","slug":"洛谷 P2286[HNOI2004]宠物收养场","date":"2018-05-16T12:06:16.000Z","updated":"2018-05-16T12:38:30.460Z","comments":true,"path":"2018/05/16/洛谷 P2286[HNOI2004]宠物收养场/","link":"","permalink":"https://guoyongheng.github.io/2018/05/16/洛谷 P2286[HNOI2004]宠物收养场/","excerpt":"","text":"题目https://www.luogu.org/problemnew/show/P2286 题意splay的基本操作 题解splay模板题可以写两个splay来写，也可以添加一个标记，用一个splay来写。我是添加了一个标记，用一个splay写的。当来了一个收养者的时候，cnt + 1，当来到一个宠物的时候，cnt - 1，cnt &gt; 0 表示收养者比宠物多， cnt &lt; 0 表示宠物比收养者多 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182#include &lt;stdio.h&gt;#include &lt;algorithm&gt;using std::abs;struct node&#123; int ch[2]; int ff,cnt,sz,val;&#125;;const int MAXN = 1e5+10;const int MOD = 1e6;const int INF = 1000000000;int root,n,tot;node t[MAXN];void PushUp(int x)&#123; t[x].sz = t[t[x].ch[0]].sz + t[t[x].ch[1]].sz + t[x].cnt;&#125;void Rotate(int x)&#123; int y = t[x].ff; int z = t[y].ff; int k = (t[y].ch[1]==x); t[z].ch[t[z].ch[1]==y]=x; t[x].ff = z; t[y].ch[k] = t[x].ch[k^1]; t[t[x].ch[k^1]].ff = y; t[x].ch[k^1] = y; t[y].ff = x; PushUp(y); PushUp(x);&#125;void Splay(int x, int goal)&#123; while(t[x].ff != goal) &#123; int y = t[x].ff; int z = t[y].ff; if(z != goal) (t[z].ch[0]==y)^(t[y].ch[0]==x)?Rotate(x):Rotate(y); Rotate(x); &#125; if(goal == 0) root = x;&#125;void Find(int x)&#123; int u = root; if(!u) return; while(t[u].ch[x &gt; t[u].val] &amp;&amp; x != t[u].val) u = t[u].ch[x &gt; t[u].val]; Splay(u, 0);&#125;void Insert(int x)&#123; int u = root, ff = 0; while(u &amp;&amp; t[u].val != x) &#123; ff = u; t[u].sz++; u = t[u].ch[x &gt; t[u].val]; &#125; if(u) t[u].cnt++, t[u].sz++; else &#123; u = ++tot; if(ff) t[ff].ch[x &gt; t[ff].val] = u; t[u].ch[0] = t[u].ch[1] = 0; t[tot].ff = ff; t[tot].val = x; t[tot].cnt = 1; t[tot].sz = 1; &#125; Splay(u, 0);&#125;int Next(int x, int f)&#123; Find(x); int u = root; if(t[u].val &gt; x &amp;&amp; f) return u; if(t[u].val &lt; x &amp;&amp; !f) return u; u = t[u].ch[f]; while(t[u].ch[f^1]) u = t[u].ch[f^1]; return u;&#125;int FNext(int x, int f)&#123; Find(x); int u = root; if(t[u].val &gt;= x &amp;&amp; f) return u; if(t[u].val &lt;= x &amp;&amp; !f) return u; u = t[u].ch[f]; while(t[u].ch[f^1]) u = t[u].ch[f^1]; return u;&#125;void Delete(int x)&#123; int last = Next(x, 0); int next = Next(x, 1); Splay(last, 0); Splay(next, last); int del = t[next].ch[0]; if(t[del].cnt &gt; 1) &#123; t[del].cnt--; t[del].sz--; Splay(del, 0); &#125; else &#123; t[next].ch[0] = 0; PushUp(next); &#125;&#125;//a=0 表示宠物//a=1 表示领养者int main()&#123; int a,b,cnt = 0; Insert(-INF); Insert(INF); scanf(\"%d\",&amp;n); int res = 0; while(n--) &#123; scanf(\"%d %d\",&amp;a,&amp;b); if(cnt == 0) Insert(b); if(cnt &gt; 0) &#123; if(a == 1) Insert(b); else &#123; int fv = t[FNext(b, 0)].val; int bv = t[FNext(b, 1)].val; if(abs(fv-b) &lt;= abs(bv - b)) &#123; res += abs(fv - b); Delete(fv); &#125; else &#123; res += abs(bv - b); Delete(bv); &#125; &#125; &#125; if(cnt &lt; 0) &#123; if(a == 0) Insert(b); else &#123; int fv = t[FNext(b, 0)].val; int bv = t[FNext(b, 1)].val; if(abs(fv - b) &lt;= abs(bv - b)) &#123; res += abs(fv - b); Delete(fv); &#125; else &#123; res += abs(bv - b); Delete(bv); &#125; &#125; &#125; cnt += (a ? 1:-1); res %= MOD; &#125; printf(\"%d\\n\",res); return 0;&#125;","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://guoyongheng.github.io/categories/数据结构/"}],"tags":[{"name":"splay","slug":"splay","permalink":"https://guoyongheng.github.io/tags/splay/"}]},{"title":"洛谷 P3391【模板】文艺平衡树（Splay）","slug":"洛谷 P3391【模板】文艺平衡树（Splay）","date":"2018-05-14T15:52:55.000Z","updated":"2018-05-14T15:58:17.963Z","comments":true,"path":"2018/05/14/洛谷 P3391【模板】文艺平衡树（Splay）/","link":"","permalink":"https://guoyongheng.github.io/2018/05/14/洛谷 P3391【模板】文艺平衡树（Splay）/","excerpt":"","text":"题目https://www.luogu.org/problemnew/show/P3391 题意写一种数据结构，实现区间翻转的操作 题解splay打个lazy标记就好了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132#include &lt;cstdio&gt;#include &lt;algorithm&gt;using namespace std;struct node&#123; int ch[2]; int ff,cnt,sz,val,lazy;&#125;;const int MAXN = 1e5+10;int root,n,tot,m;node t[MAXN];void PushUp(int x)&#123; t[x].sz = t[t[x].ch[0]].sz + t[t[x].ch[1]].sz + t[x].cnt;&#125;void PushDown(int x)&#123; if(t[x].lazy) &#123; t[t[x].ch[0]].lazy ^= 1; t[t[x].ch[1]].lazy ^= 1; swap(t[x].ch[0], t[x].ch[1]); t[x].lazy ^= 1; &#125;&#125;void Rotate(int x)&#123; int y = t[x].ff; int z = t[y].ff; int k = (t[y].ch[1]==x); t[z].ch[t[z].ch[1]==y]=x; t[x].ff = z; t[y].ch[k] = t[x].ch[k^1]; t[t[x].ch[k^1]].ff = y; t[x].ch[k^1] = y; t[y].ff = x; PushUp(y); PushUp(x);&#125;void Splay(int x, int goal)&#123; while(t[x].ff != goal) &#123; int y = t[x].ff; int z = t[y].ff; if(z != goal) (t[z].ch[0]==y)^(t[y].ch[0]==x)?Rotate(x):Rotate(y); Rotate(x); &#125; if(goal == 0) root = x;&#125;void Insert(int x)&#123; int u = root, ff = 0; while(u &amp;&amp; t[u].val != x) &#123; ff = u; t[u].sz++; u = t[u].ch[x &gt; t[u].val]; &#125; if(u) t[u].cnt++, t[u].sz++; else &#123; u = ++tot; if(ff) t[ff].ch[x &gt; t[ff].val] = u; t[u].ch[0] = t[u].ch[1] = 0; t[tot].ff = ff; t[tot].val = x; t[tot].sz = t[tot].cnt = 1; t[tot].lazy = 0; &#125; Splay(u, 0);&#125;int KTh(int k)&#123; int u = root; while(true) &#123; PushDown(u); if(t[t[u].ch[0]].sz + 1 &lt; k) &#123; k = k - t[t[u].ch[0]].sz - 1; u = t[u].ch[1]; &#125; else if(t[t[u].ch[0]].sz+1 &gt; k) u = t[u].ch[0]; else return u; &#125;&#125;void solve(int l, int r)&#123; l = KTh(l); r = KTh(r+2); Splay(l, 0); Splay(r, l); t[t[t[root].ch[1]].ch[0]].lazy ^= 1;&#125;void Output(int x)&#123; PushDown(x); if(t[x].ch[0]) Output(t[x].ch[0]); if(t[x].val &gt; 1 &amp;&amp; t[x].val &lt; n+2) printf(\"%d \",t[x].val-1); if(t[x].ch[1]) Output(t[x].ch[1]);&#125;int main()&#123; scanf(\"%d %d\", &amp;n, &amp;m); for(int i = 1; i &lt;= n+2; ++i) Insert(i); int l,r; while(m--) &#123; scanf(\"%d %d\",&amp;l, &amp;r); solve(l, r); &#125; Output(root); return 0;&#125;","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://guoyongheng.github.io/categories/数据结构/"}],"tags":[{"name":"splay","slug":"splay","permalink":"https://guoyongheng.github.io/tags/splay/"}]},{"title":"洛谷 P3369【模板】普通平衡树（Treap/SBT）","slug":"洛谷 P3369【模板】普通平衡树（Treap SBT）","date":"2018-05-13T17:14:04.000Z","updated":"2018-05-14T02:30:17.478Z","comments":true,"path":"2018/05/14/洛谷 P3369【模板】普通平衡树（Treap SBT）/","link":"","permalink":"https://guoyongheng.github.io/2018/05/14/洛谷 P3369【模板】普通平衡树（Treap SBT）/","excerpt":"","text":"题目https://www.luogu.org/problemnew/show/P3369 题意splay的基本操作 题解https://blog.csdn.net/qq_30974369/article/details/77587168 把链接中的模板拿来用就好，先插入INF和-INF作为边界，那模板功能不全，我又添加了MinTh函数和KTh函数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156#include &lt;stdio.h&gt;struct node&#123; int ch[2]; int ff,cnt,sz,val;&#125;;const int MAXN = 1e5+10;const int INF = 1e8+10;int root,n,tot;node t[MAXN];void PushUp(int x)&#123; t[x].sz = t[t[x].ch[0]].sz + t[t[x].ch[1]].sz + t[x].cnt;&#125;void Rotate(int x)&#123; int y = t[x].ff; int z = t[y].ff; int k = (t[y].ch[1]==x); t[z].ch[t[z].ch[1]==y]=x; t[x].ff = z; t[y].ch[k] = t[x].ch[k^1]; t[t[x].ch[k^1]].ff = y; t[x].ch[k^1] = y; t[y].ff = x; PushUp(y); PushUp(x);&#125;void Splay(int x, int goal)&#123; while(t[x].ff != goal) &#123; int y = t[x].ff; int z = t[y].ff; if(z != goal) (t[z].ch[0]==y)^(t[y].ch[0]==x)?Rotate(x):Rotate(y); Rotate(x); &#125; if(goal == 0) root = x;&#125;void Find(int x)&#123; int u = root; if(!u) return; while(t[u].ch[x &gt; t[u].val] &amp;&amp; x != t[u].val) u = t[u].ch[x &gt; t[u].val]; Splay(u, 0);&#125;void Insert(int x)&#123; int u = root, ff = 0; while(u &amp;&amp; t[u].val != x) &#123; ff = u; t[u].sz++; u = t[u].ch[x &gt; t[u].val]; &#125; if(u) t[u].cnt++, t[u].sz++; else &#123; u = ++tot; if(ff) t[ff].ch[x &gt; t[ff].val] = u; t[u].ch[0] = t[u].ch[1] = 0; t[tot].ff = ff; t[tot].val = x; t[tot].cnt = 1; t[tot].sz = 1; &#125; Splay(u, 0);&#125;int Next(int x, int f)&#123; Find(x); int u = root; if(t[u].val &gt; x &amp;&amp; f) return u; if(t[u].val &lt; x &amp;&amp; !f) return u; u = t[u].ch[f]; while(t[u].ch[f^1]) u = t[u].ch[f^1]; return u;&#125;void Delete(int x)&#123; int last = Next(x, 0); int next = Next(x, 1); Splay(last, 0); Splay(next, last); int del = t[next].ch[0]; if(t[del].cnt &gt; 1) &#123; t[del].cnt--; t[del].sz--; Splay(del, 0); &#125; else &#123; t[next].ch[0] = 0; PushUp(next); &#125;&#125;//查询x的最小排名void MinTh(int x)&#123; Find(x); printf(\"%d\\n\",t[t[root].ch[0]].sz);&#125;//查询排名为x的数void KTh(int x)&#123; int u = root; while(true) &#123; if(x &gt; t[t[u].ch[0]].sz &amp;&amp; x &lt;= t[t[u].ch[0]].sz+t[u].cnt) &#123; printf(\"%d\\n\",t[u].val); return; &#125; else if(x &gt; t[t[u].ch[0]].sz+t[u].cnt) &#123; x -= t[t[u].ch[0]].sz+t[u].cnt; u = t[u].ch[1]; &#125; else u = t[u].ch[0]; &#125;&#125;int main()&#123; root = tot = 0; int opt,x; scanf(\"%d\",&amp;n); Insert(-INF); Insert(INF); for(int i = 0; i &lt; n; ++i) &#123; scanf(\"%d %d\",&amp;opt,&amp;x); if(opt == 1) Insert(x); else if(opt == 2) Delete(x); else if(opt == 3) MinTh(x); else if(opt == 4) KTh(x+1); else if(opt == 5) printf(\"%d\\n\",t[Next(x, 0)].val); else if(opt == 6) printf(\"%d\\n\",t[Next(x, 1)].val); &#125; return 0;&#125;","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://guoyongheng.github.io/categories/数据结构/"}],"tags":[{"name":"splay","slug":"splay","permalink":"https://guoyongheng.github.io/tags/splay/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-05-12T01:40:43.406Z","updated":"2017-10-28T00:39:58.000Z","comments":true,"path":"2018/05/12/hello-world/","link":"","permalink":"https://guoyongheng.github.io/2018/05/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}